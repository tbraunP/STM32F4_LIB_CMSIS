/*
 *  Linker script for STM32F407VG Device with  1024KByte FLASH, 128KByte RAM
 */
OUTPUT_FORMAT("elf32-littlearm", "elf32-bigarm", "elf32-littlearm")
OUTPUT_ARCH(arm)

/* entry Point */
ENTRY(Reset_Handler)

/* Specify the memory areas */
MEMORY
{
  FLASH (rx)      : ORIGIN = 0x08000000, LENGTH = 1024K
  RAM (xrw)       : ORIGIN = 0x20000000, LENGTH = 128K
  MEMORY_B1 (rx)  : ORIGIN = 0x60000000, LENGTH = 0K
  CCMRAM (rw)     : ORIGIN = 0x10000000, LENGTH = 64K
}

/* The size of the stack used by the application. NOTE: you need to adjust*/
STACK_SIZE = 1024;
/* The size of the heap used by the application. NOTE: you need to adjust */
HEAP_SIZE = 10*1024;

SECTIONS {
	.isr_vector : { 						/* the vector table goes FIRST into FLASH */
		KEEP(*(.isr_vector)) 				/* vector table */
		. = ALIGN(4);
	} >FLASH

	/* code and constants */
	.text : {
		. = ALIGN(4);
		*(.text)							/* .text sections (code) */
		*(.text*)							/* .text* sections (code) */
		*(.rodata)							/* .rodata sections (constants, strings, etc.) */
		*(.rodata*)							/* .rodata* sections (constants, strings, etc.) */

		KEEP(*(.init))
		KEEP(*(.fini))
		. = ALIGN(4);
		_etext = .;							/* global symbols at end of code */
	} >FLASH


 	/* C++ exception unwinding stuff--needed by some toolchains */
   .ARM.extab   : { *(.ARM.extab* .gnu.linkonce.armextab.*) } >FLASH
    .ARM : {
    __exidx_start = .;
      *(.ARM.exidx*)
      __exidx_end = .;
    } >FLASH

	.preinit_array : {
		PROVIDE(__preinit_array_start = .);
		KEEP (*(.preinit_array*))
		PROVIDE(__preinit_array_end = .);
	} >FLASH

/* The .preinint_array and .inint_array sections hold arrays of function pointers that are
	called by the startup code to initialize the program. In C++ programs these hold pointers to the static
	constructors that are called by __libc_init_array() before main(). */
	.init_array : {
		PROVIDE(__init_array_start = .);
		KEEP (*(SORT(.init_array.*)))
		KEEP (*(.init_array*))
		KEEP(*(.ctors));					/* C++ constructors */
		PROVIDE(__init_array_end = .);
	} >FLASH
	

/* The .fini_array section holds an array of function pointers that are called before terminating the
	program. In C++ programs this array holds pointers to the static destructors.*/
	.fini_array : {
		PROVIDE(__fini_array_start = .);
		KEEP (*(.fini_array*))
		KEEP (*(SORT(.fini_array.*)))
		PROVIDE(__fini_array_end = .);
	} >FLASH

/* The .data section contains initialized data.
	The .data section is located in RAM, but is loaded to ROM and copied to RAM during startup. */
	.data : {
		__data_load = LOADADDR (.data);
		__data_start = .;
		*(.data)							/* .data sections */
		*(.data*)							/* .data* sections */
		. = ALIGN(4);
		__data_end__ = .;
		_edata = __data_end__;
	} >RAM AT>FLASH

	.bss : {
		__bss_start__ = . ;
		*(.bss)
		*(.bss*)
		*(COMMON)
		. = ALIGN(4);
		_ebss = .;							/* define a global symbol at bss end */
		__bss_end__ = .;
	} >RAM

	PROVIDE( end = _ebss );
	PROVIDE( _end = _ebss );
	PROVIDE( __end__ = _ebss );

	/* Heap */
	.heap : {
		__heap_start__ = . ;
		. = . + HEAP_SIZE;
		. = ALIGN(8);
		__heap_end__ = . ;
	} >RAM

	/* Stack */
	.stack : {
		__stack_start__ = . ;
		. = . + STACK_SIZE;
		. = ALIGN(4);
		__c_stack_top__ = . ;
		__stack_end__ = . ;
	} >RAM

	/* Remove information from the standard libraries */
	/DISCARD/ : {
		libc.a ( * )
		libm.a ( * )
		libgcc.a ( * )
	}
	
	.ARM.attributes 0 : { *(.ARM.attributes) }
}
